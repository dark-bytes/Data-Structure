#include<iostream>
#include<vector>
#include<malloc.h>
using namespace std;

typedef struct arc_datatype
{
	int point;
	struct arc_datatype* arc_point;
	int wt;
}arc;
typedef struct vertex
{
	struct arc_datatype* arc_point;
}VERTEX;
class graph{
	public:

		vector<VERTEX> ver;
	
		graph(int t_ver)
		{
			ver.resize(t_ver);
			for(int i = 0;i<ver.size(); i++){
				ver[i].arc_point = NULL;
			}
		}	
	
		void join(int p,int q,int wt)
		{
			arc* temp;
			temp = (arc*)malloc(sizeof(arc));
			cout<<"Sud";
			if(ver[p-1].arc_point == NULL)
			{
				ver[p-1].arc_point = temp;
				temp->point = q;
				temp->wt = wt;
				temp->arc_point = NULL;
			}	
			else
			{
				arc* forward = ver[p-1].arc_point;
				while(forward->arc_point != NULL)
				{
					forward = forward->arc_point;
					cout<<"Singh"; 
				}
				forward->arc_point = temp;
				temp->point = q;
				temp->wt = wt;
				temp->arc_point = NULL;
			}
		}
	
	void display(int p)
	{
		arc* next = ver[p-1].arc_point;
		cout<<"No. of nodes connected to node"<<p<<"->";
		while(next != NULL)
		{
			cout<<next->point<<"Weight between them is"<<next->wt<<endl;
			next = next->arc_point;
		}
	}
	
};




int main()
{
	graph g(4);
	cout<<"No. of edges u want->";
	int edges;
	cin>>edges;
	int p,q;
	int wt;
	for(int i = 0;i<edges;i++)
	{
		cin>>p>>q>>wt;
		cout<<"Sud";
		g.join(p,q,wt);
	}
	cout<<"U want to display nodes connected Y/N";
	char ch;
	cin>>ch;
	while(ch=='y' || ch=='Y')
	{
		cout<<endl<<"Enter Node";
		cin>>p;
		g.display(p);
		cin>>ch;
	}
	return 0;
}
